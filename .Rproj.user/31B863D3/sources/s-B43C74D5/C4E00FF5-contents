# Some useful keyboard shortcuts for package authoring:
#
#   Install Package:           'Cmd + Shift + B'
#   Check Package:             'Cmd + Shift + E'
#   Test Package:              'Cmd + Shift + T'

#' Translater
#'
#' @description Translates text into a target language. Uses Deepl API
#' (https://www.deepl.com/) to provide high quality translations.
#' 
#' @param input_text String to be translated.
#'
#' @param target_language Language code of language user wishes to translate sentence to.
#' Current target language options are: "BG”  (Bulgarian), "CS" (Czech), "DA" (Danish), 
#' "DE" (German), "EL" (Greek), "EN-GB" (British English), "EN-US" (American English), 
#' "ES" (Spanish), "ET" (Estonian), "FI" (Finnish), "FR" (French), "HU" (Hungarian), 
#' "ID" (Indonesian), "IT" (Italian), "JA" (Japanese), "LT" (Lithuanian), "LV" (Latvian), 
#' "NL" (Dutch), "PL" (Polish), "PT-PT" (Portuguese), "PT-BR" (Brazilian Portuguese), 
#' "RO" (Romanian), "RU" (Russian), "SK" (Slovak), "SL" (Slovenian), "SV" (Swedish), 
#' "TR" (Turkish), and "ZH" (Chinese).
#' 
#' @param source_language Optional parameter to set the language of the \code{input_text}. 
#' If not specified, function will attempt to automatically recognise language.
#' Current target language options are: "BG”  (Bulgarian), "CS" (Czech), "DA" (Danish), 
#' "DE" (German), "EL" (Greek), "EN" (all English varieties), "ES" (Spanish), 
#' "ET" (Estonian), "FI" (Finnish), "FR" (French), "HU" (Hungarian), "ID" (Indonesian), 
#' "IT" (Italian), "JA" (Japanese), "LT" (Lithuanian), "LV" (Latvian), "NL" (Dutch), 
#' "PL" (Polish), "PT" (all Portuguese varieties), "RO" (Romanian), "RU" (Russian), 
#' "SK" (Slovak), "SL" (Slovenian), "SV" (Swedish), "TR" (Turkish), and "ZH" (Chinese).
#'
#' @return \code{output_text}: the translated version of \code{input_text} in target language \code{target_language}. 
#'
#' @examples 
#' translate("Hello world!", "FR")
#' 
#' translate("The brown fox jumped over the black cat.", "PT-PT")


### Translate Function ###
#' @export
translate <- function(input_text, target_language, source_language=NULL) {
  
  # Check that both arguments are strings 
  if(!assertthat::is.string(input_text))
    stop("Argument 'text' must be a string.")
  
  if(!assertthat::is.string(target_language))
    stop("Argument 'target_lang' must be a string.")
  
  
  # Check that argument 2 and 3 are from correct language codes list 
  lang_codes_output <- c("BG", "CS", "DA", "DE", "EL", "EN-GB", "EN-US", "ES", "ET", 
                         "FI", "FR", "HU", "ID", "IT", "JA", "LT", "LV", "NL", "PL", 
                         "PT-PT", "PT-BR", "RO", "RU", "SK", "SL", "SV", "TR", "ZH")
  
  if((target_language %in% lang_codes_output) == FALSE)
    stop("Argument 'target_language' must be an available language code. Check help file for more information")
  
  lang_codes_input <- c("BG", "CS", "DA", "DE", "EL", "EN", "ES", "ET", "FI", "FR", 
                        "HU", "ID", "IT", "JA", "LT", "LV", "NL", "PL", "PT", "RO", 
                        "RU", "SK", "SL", "SV", "TR", "ZH")
  
  if((source_language %in% lang_codes_input) == FALSE)
    stop("Argument 'source_language' must be an available language code. Check help file for more information")
  
  
  # Get API 
  url <- "https://api-free.deepl.com/v2/translate?auth_key=bff36225-b49d-4979-124c-0b52ebbee98d:fx"
  
  # Check for source language argument
  if(!is.null(source_language))
    raw_result <- httr::POST(url, query = list(text = input_text, target_lang = target_language, source_lang = source_language))
  else
    raw_result <- httr::POST(url, query=list(text=input_text, target_lang=target_language))
  
  # Get readable data
  data <- jsonlite::fromJSON(rawToChar(raw_result$content))
  
  # Save outputs
  output_text <- data$translations$text
  source_language <- data$translations$detected_source_language
  
  # Output translation
  output_text
  
}

