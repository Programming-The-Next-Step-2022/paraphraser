---
title: "Translator"
author: Margarida AraÃºjo Jorge Moreira da Silva
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Translator}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

## Package
This package was built in the context of research into eHealth interventions but can be used in all sorts of contexts that require nuanced translations. \
To install this package (...)

```{r setup}
library(project.margarida)
```


## Translate Function

Translate function translates text into a target language by using Deepl's API (<https://www.deepl.com/>) to provide high quality translations. \
Deepl uses neural networks in their machine translation to capture more nuances in text input than other translators. \
\
**Arguments:** \
* `input_text`: The string you wish to translate \
* `target_language`: The language code of language you wish to translate your string(s) to. Note that it must be an accepted language code in a string format and in upper case to be accepted. For example, "BG" for Bulgarian. The help file lists all accepted language codes. \
* `source_language`: Optional argument to set the language of the `input_text`. If this is not chosen, then the translator will attempt to detect the language automatically. Once again, an accepted language code must be used. Note that the language codes accepted for `target_language` are not exactly the same as the ones accepted for `source_language`. There are only minor differences, for example, the `target_language` codes include both Portugal Portuguese ("PT-PT") and Brazilian Portuguese ("PT-BR") while the `source_language` codes do not make this distinction ("PT"). The help file lists all the options. \
* `formality`: Optional argument in case you want to receive a more formal or informal translation than default. This argument is only accepted in a smaller number of languages (German, French, Italian, Spanish, Dutch, Polish, Portuguese, and Russian). Options are "default", "more", and "less". \
* `preserve_formatting`: Optional argument to determine whether the original format of the `input_text` should be kept, which is the default setting, or whether the translator should format the text. For example, by including punctuation and upper or lower cases when needed. Options are `1` for default and `0` for changing formatting. \

\
**Output:**\
Just calling the function will print a list with 4 outputs. These are the main arguments you have defined and the outcome of the translate function: \
* `input_text` \
* `source_language` \
* `output_text`: this is the translated version of the `input_text` \
* `target_language` \

### Examples

**Using only the essential arguments:** \

This example shows how easy it is to use this function especially when you do not need to specify any additional arguments. The translator detects the `source_language` automatically. It also gives you back the input text and source language it detected (or you specified) and the target language you have picked along with the output text (the translation). \

```{r translate}
translate(input_text = "Hello world!", 
          target_language = "RU")
```
\
Here you can see another example that also shows how you can access only the output you need, rather than getting a list of of all that the function returns. \

```{r, results = 'hide'}
translation_1 <- translate(input_text = "The red fox jumped over the black cat",
                           target_language = "LV")
```
```{r}
translation_1$output_text
```

\

**Using optional arguments:** \

The two examples below show how the translation can look quite different depending on what the additional optional arguments are set as. \ 


Note how in the first one, the formatting was not changed as the sentences were not formatted with upper case (`preserve_formatting = 1`), and a more informal verb, "pulou", is used for "jumped" (`formality = "less"`). \


```{r, results = "hide"}
translation_2 <- translate(input_text = "the cat jumped over the fox. then he fell.", 
          target_language = "PT-BR",
          source_language = "EN",
          formality = "less",
          preserve_formatting = 1)
```

```{r}
translation_2$output_text
```


In contrast, in the second example, the first letter is now uppercase (`preserve_formatting = 1`), and a more formal verb, "saltou", was used for "jumped" (`formality = "more"`). \

```{r, results = "hide"}
translation_3 <- translate(input_text = "the cat jumped over the fox. then he fell.", 
          target_language = "PT-BR",
          source_language = "EN",
          formality = "more",
          preserve_formatting = 0)
```

```{r}
translation_3$output_text
```
\


## User Interface: R Shiny App

The user interface was created with Shiny from R Studio (<https://shiny.rstudio.com/>). \

### Screenshots

First, the user opens the shiny app to reveal this user interface:\
![User Interface](/Users/margaridamoreirasilva/Documents/GitHub/translate_/screenshots/user_interface.png){width=80%} \
\
On the left side, the user can click on the drop down button to choose the source language or leave it at the "Detect Language" option. This option means that the `source_language` argument is not defined and the translator will try to detect the language automatically. \
Below this, there is a text box where the user can write the text they wish to translate. \
Right above the text box is written the language the function is using as the source language. This is especially useful to check when the user uses the "Detect Language" option and wants to check whether the right one was detected. \
![Selecting Source Language](/Users/margaridamoreirasilva/Documents/GitHub/translate_/screenshots/source_language.png){width=40%} \

\
In the middle section, you see two other questions with different options. Here you can define the optional arguments of the function. They are initially set to their default values but you can change them which will update your translation. \
Note that the second button, to choose the level of formality, is not available for every language. This button will only appear if you select a target language that is possible to make more or less formal. For now, these are: Portuguese, Brazilian Portuguese, Spanish, German, French, Russian, Polish, Dutch, and Italian. \
![Optional Buttons](/Users/margaridamoreirasilva/Documents/GitHub/translate_/screenshots/middle_buttons.png){width=30%} \
\
Finally, the right section contains another drop down button very similar to the one on the left. Here you can also select from the language options to choose the `target_language`. This choice is necessary so there is no "Detect Language" option. \
Below it there is a box where your translated output will appear. \
![Selecting Target Language](/Users/margaridamoreirasilva/Documents/GitHub/translate_/screenshots/target_language.png){width=40%} \
\
An example of a translation looks like: \
![Example of Translation](/Users/margaridamoreirasilva/Documents/GitHub/translate_/screenshots/example.png){width=80%} \
*Since Hungarian was selected as the target language, there is no button to choose the level of formality* \


## Issues Encountered

* There was an issue with the **default value for the source_language argument** in shiny. The default value in the function was originally set to be NULL unless the participant specified the source_language they wanted. I tried fixing it in different ways within shiny, since it would just give an error if "Detect language" was selected from the start. I ended up just changing the default value within the function to be a string called "NULL" and then, within the function, this is changed to a normal NULL value if nothing else is specified. This fixed the problem within shiny and the function still works so I left it like that. \
\
* I had a similar problem with the **formatting argument**. When I kept the input options as numeric, rather than strings, I would get errors regarding the input not being numeric, when it definitely was. I tested the strings `"1"` and `"0"` rather than the numbers 1 and 0, while also commenting out the warning messages regarding non-numeric values and changing it within the function itself, and this immediately fixed the problem in the shiny app. \
\
* The **split_sentences** argument didn't seem to be very important. It was hard to tell exactly what that should look like since the online version of the deepl translator doesn't seem to give that option to users anyways. It made me reconsider whether I should keep this argument. It does seem to work with new lines sometimes, but I didn't really see a lot of situations where this would be useful. I ended up removing this argument completely from the `translate()` function. \ 
\
\
* I included **conditional panels** in the shiny script to be able to only show the buttons to pick the level of formality for the languages that offer this possibility, as selecting anything other than "default" with another language will lead to an error. However, I could not figure out how to make the condition include the whole set of languages that are possible to use. I ended up using one conditional statement and one button per language which resulted in 9 almost identical pieces of code in a row. This seems very uneffecient but I tried several ways of making some sort of OR statement but the function would give an error with every method. \
\


