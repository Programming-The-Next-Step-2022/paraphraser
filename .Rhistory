setwd("~/Documents/GitHub/project_margarida")
setwd("~/Documents/GitHub/project_margarida/paraphraser")
package.skeleton(name="translator")
package.skeleton(name=translator, code_files="main.R")
package.skeleton(name="translator", code_files="main.R")
devtools::load_all("~/Documents/GitHub/project_margarida")
use_description()
devtools::install_deps()
??use_description()
usethis::use_description()
usethis::use_description(check_name=FALSE)
setwd("~/Documents/GitHub/project_margarida")
create_package()
??create_package()
usethis::use_vignette("my-vignette")
shiny::runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
library(project.margarida)
translate("hello", "FR", preserve_formatting = "1")
translate("hello", "FR", preserve_formatting = "0")
translate("hello", "FR", preserve_formatting = "4")
translate("hello", "FR", preserve_formatting = TRUE)
preserve_formatting = "1"
if(preserve_formatting == "0") {
preserve_formatting <- 0
} else if(preserve_formatting == "1") {
preserve_formatting <- 1
}
preserve_formatting
typeof(preserve_formatting)
preserve_formatting = "1"
typeof(preserve_formatting)
preserve_formatting <- as.numeric(preserve_formatting)
preserve_formatting
typeof(preserve_formatting)
as.numeric(preserve_formatting)
preserve_formatting <- as.numeric(preserve_formatting)
preserve_formatting
typeof(preserve_formatting)
runApp('R')
runApp('R')
library(project.margarida)
translate("hi friends", "PT-PT", "EN", formality="more", preserve_formatting="0")
library(project.margarida)
translate("hello friends", "PT-PT", "EN", formality="more", preserve_formatting = "0")
library(project.margarida)
translate("hello friends", "PT-PT", "EN", formality="more", preserve_formatting = "0")
library(project.margarida)
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
devtools::document()
library(project.margarida)
devtools::document()
devtools::document("project.margarida")
runApp('R')
devtools::document()
rm(list = c("translate"))
devtools::document()
shiny::runApp('R')
?wellPanel
?textOutput
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
shiny::runApp('R')
library(project.margarida)
translate("he jumped over the fence", "PT-BR", formality="more")
translate("he jumped over the fence", "PT-BR", formality="less")
devtools::document()
rm(list = c("translate"))
devtools::document()
devtools::document(rm(list = c("translate")))
devtools::test()
source("/main.R")
runApp('R')
paste("Detected language is:","French")
runApp('R')
runApp('R')
languages <- c("Bulgarian","Czech",
"Danish", "German",
"Greek", "English",
"Spanish", "Estonian",
"Finnish", "French",
"Hungarian", "Indonesian",
"Italian", "Japanese" ,
"Lithuanian" , "Latvian" ,
"Dutch", "Polish",
"Portuguese", "Romanian",
"Russian", "Slovak",
"Slovenian", "Swedish",
"Turkish", "Chinese")
codes <- c("BG", "CS", "DA", "DE","EL","EN","ES","ET","FI","FR","HU","ID","IT",
"JA", "LT", "LV","NL","PL", "PT", "RO", "RU", "SK", "SL", "SV",
"TR", "ZH")
data.frame(languages, codes, ncol=2, nrow=26)
data.frame(languages, codes)
m <- data.frame(languages, codes)
# Define UI ------------------------------------------------------------------
ui <- fluidPage(
theme= shinytheme("sandstone"),
tags$head(tags$style(HTML('* {font-family: "Beirut"};'))),
titlePanel("Translator"),
p("This translator was built with an R package that uses the API from Deepl.
(https://www.deepl.com). You can choose from 28 different languages to
translate your text to. Input your text in the left box and select which
language you want to translate it to in the drop down button on the right."),
languages <- c("Bulgarian","Czech",
"Danish", "German",
"Greek", "English",
"Spanish", "Estonian",
"Finnish", "French",
"Hungarian", "Indonesian",
"Italian", "Japanese" ,
"Lithuanian" , "Latvian" ,
"Dutch", "Polish",
"Portuguese", "Romanian",
"Russian", "Slovak",
"Slovenian", "Swedish",
"Turkish", "Chinese"),
codes <- c("BG", "CS", "DA", "DE","EL","EN","ES","ET","FI","FR","HU","ID","IT",
"JA", "LT", "LV","NL","PL", "PT", "RO", "RU", "SK", "SL", "SV",
"TR", "ZH"),
m <- data.frame(languages, codes),
m[codes==SV]
m[codes==SV]
m <- data.frame(languages, codes)
m[,"SV"]
langs <- c("BG"="Bulgarian", "CS"="Czech")
# Define UI ------------------------------------------------------------------
ui <- fluidPage(
theme= shinytheme("sandstone"),
tags$head(tags$style(HTML('* {font-family: "Beirut"};'))),
titlePanel("Translator"),
p("This translator was built with an R package that uses the API from Deepl.
(https://www.deepl.com). You can choose from 28 different languages to
translate your text to. Input your text in the left box and select which
language you want to translate it to in the drop down button on the right."),
languages <- c("Bulgarian","Czech",
"Danish", "German",
"Greek", "English",
"Spanish", "Estonian",
"Finnish", "French",
"Hungarian", "Indonesian",
"Italian", "Japanese" ,
"Lithuanian" , "Latvian" ,
"Dutch", "Polish",
"Portuguese", "Romanian",
"Russian", "Slovak",
"Slovenian", "Swedish",
"Turkish", "Chinese"),
codes <- c("BG", "CS", "DA", "DE","EL","EN","ES","ET","FI","FR","HU","ID","IT",
"JA", "LT", "LV","NL","PL", "PT", "RO", "RU", "SK", "SL", "SV",
"TR", "ZH"),
m <- data.frame(languages, codes),
langs <- c("BG"="Bulgarian", "CS"="Czech")
langs["BG"]
langs <- c("BG"="Bulgarian", "CS"="Czech")
langs["BG"]
langs <- c("BG" = "Bulgarian", "CS" = "Czech","DA" = "Danish", "DE" = "German",
"EL" = "Greek", "EN" = "English", "ES" = "Spanish", "ET" = "Estonian",
"FI" = "Finnish", "FR" = "French", "HU" = "Hungarian",
"ID" = "Indonesian", "IT" = "Italian", "JA" = "Japanese",
"LT" = "Lithuanian", "LV" = "Latvian", "NL" = "Dutch", "PL" = "Polish",
"PT" = "Portuguese", "RO" = "Romanian", "RU" = "Russian",
"SK" = "Slovak", "SL" = "Slovenian", "SV" = "Swedish", "TR" = "Turkish",
"ZH" = "Chinese")
langs["SK"]
m <- "PT"
langs[m]
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
translation_7 <- translate("he jumped over the fence", "PT-PT", "EN", "less")
translation_8 <- translate("he jumped over the fence", "PT-PT", "EN", "more")
isTRUE(all.equal(translation_7$output_text,
translation_8$output_text))
translation_11 <- translate("hi", "FR", preserve_formatting = 1)
translation_12 <- translate("hi", "FR", preserve_formatting = 0)
isTRUE(all.equal(translation_11$output_text,
translation_12$output_text))
runApp('R')
runApp('R')
runApp('R')
runApp('R')
preserve_formatting == "1"
# Change preserve_formatting argument back to numeric if it is not
# Had to change it to strings so that shiny would work
if(preserve_formatting == "0") {
preserve_formatting <- 0
} else if(preserve_formatting == "1") {
preserve_formatting <- 1
}
preserve_formatting <- "1"
# Change preserve_formatting argument back to numeric if it is not
# Had to change it to strings so that shiny would work
if(preserve_formatting == "0") {
preserve_formatting <- 0
} else if(preserve_formatting == "1") {
preserve_formatting <- 1
}
preserve_formatting
preserve_formatting <- "1"
if(!is.numeric(preserve_formatting) && !is.character(preserve_formatting) ) {
print("Argument 'preserve_formatting' must be valid number or string.")
}
preserve_formatting <- 0
if(!is.numeric(preserve_formatting) && !is.character(preserve_formatting) ) {
print("Argument 'preserve_formatting' must be valid number or string.")
}
preserve_formatting <- FALSE
if(!is.numeric(preserve_formatting) && !is.character(preserve_formatting) ) {
print("Argument 'preserve_formatting' must be valid number or string.")
}
preserve_formatting <- TRUE
if(!is.numeric(preserve_formatting) && !is.character(preserve_formatting) ) {
print("Argument 'preserve_formatting' must be valid number or string.")
}
library(project.margarida)
translate("hello friends", "RU", preserve_formatting = 2)
translate("hello friends", "RU", preserve_formatting = TRUE)
translate("hello friends", "RU", preserve_formatting = 0)
devtools::test()
runApp('R')
runApp('R')
library(project.margarida)
devtools::test()
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
