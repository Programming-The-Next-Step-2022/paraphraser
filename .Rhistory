setwd("~/Documents/GitHub/project_margarida")
setwd("~/Documents/GitHub/project_margarida/paraphraser")
package.skeleton(name="translator")
package.skeleton(name=translator, code_files="main.R")
package.skeleton(name="translator", code_files="main.R")
devtools::load_all("~/Documents/GitHub/project_margarida")
use_description()
devtools::install_deps()
??use_description()
usethis::use_description()
usethis::use_description(check_name=FALSE)
setwd("~/Documents/GitHub/project_margarida")
create_package()
??create_package()
devtools::document()
library(project.margarida)
translate(input_text="Hello", target_language="PT-PT", formal="less")
library(project.margarida)
translate(input_text="Hello", target_language="PT-PT", formal="less")
?translate
??translate
?project.margarida::translate
is.numeric(5)
is.numeric(5"e")
is.numeric("e")
is.number(5)
assertthat::is.number(5)
library(project.margarida)
translate(input_text="Hello friends", target_language="PT-PT", source_language =NULL, formality="less", preserve_formatting=1)
translate(input_text="Hello friends", target_language="PT-PT", source_language ="EN", formality="less", preserve_formatting=1)
translate(input_text="Hello friends", target_language="PT-PT", source_language ="EN", formal="less", preserve_formatting=1)
split_arguments <- c(0, 1, "nonewlines")
split_arguments
split_sentences = 1
split_sentences %in% split_arguments
split_sentences = "1"
split_sentences %in% split_arguments
split_sentences = 0
split_sentences %in% split_arguments
split_sentences = 3
split_sentences %in% split_arguments
split_sentences = "nonewlines"
split_sentences %in% split_arguments
formatting_arguments <- c(0, 1)
preserve_formatting = 1
preserve_formatting %in% formatting_arguments
preserve_formatting = "1"
preserve_formatting %in% formatting_arguments
preserve_formatting = 3
preserve_formatting %in% formatting_arguments
is.character("f")
is.character("falling. hgoeng ens fneog.)
is.character("falling. hgoeng ens fneog.")
split_sentences = "hello world"
if(!is.numeric(split_sentences) | !is.character(split_sentences))
print("no")
else
print("yes")
#stop("Argument
split_sentences = "ghbg fjkdgk"
if(!is.numeric(split_sentences) | !is.character(split_sentences))
print("no")
else
print("yes")
split_sentences = 45
if(!is.numeric(split_sentences) | !is.character(split_sentences))
print("no")
else
print("yes")
split_sentences = "34"
if(!is.numeric(split_sentences) | !is.character(split_sentences))
print("no")
else
print("yes")
split_sentences = TRUE
if(!is.numeric(split_sentences) | !is.character(split_sentences))
print("no")
else
print("yes")
if(!is.numeric(split_sentences) && !is.character(split_sentences))
print("no")
else
print("yes")
typeof(split_sentences)
if(!is.numeric(split_sentences) && !is.character(split_sentences))
print("no")
else
print("yes")
if(!is.numeric(split_sentences) && !is.character(split_sentences))
print("no")
split_sentences = "TRUE"
if(!is.numeric(split_sentences) && !is.character(split_sentences))
print("no")
split_sentences = 34
if(!is.numeric(split_sentences) && !is.character(split_sentences))
print("no")
split_sentences = FALSE
if(!is.numeric(split_sentences) && !is.character(split_sentences))
print("no")
output_text <- "hello"
source_language <- "EN"
c <- c(output_text, source_language)
c
c$output_text
c <- list(output_text, source_language)
c
c$output_text
library(project.margarida)
translate("text", "PT-PT", formality = "less", preserve_formatting = 1)
library(project.margarida)
translate("text", "PT-PT", formality = "less", preserve_formatting = 1)
library(project.margarida)
translate("text", "PT-PT", formality = "less", preserve_formatting = 1)
devtools::document()
devtools::document()
devtools::document()
usethis::use_vignette("my-vignette")
library(project.margarida)
translate(input_text = "Hello world!", target_language = "RU")
runApp('R')
runApp('R')
runApp('R')
![User Interface](/Users/margaridamoreirasilva/Desktop/trial_screenshot.png)
devtools::document()
devtools::document()
devtools::document()
runApp('R')
runApp('R')
input_text <- "hello"
source_language <- "EN"
output_text <- "olá"
target_language <- "PT-PT"
# Create class
output <- list("input text" = input_text,
"source language" = source_language,
"output text" = output_text,
"target language" = target_language)
output
output$`source language`
output$source language
output$"source language"
input_text <- "hello"
source_language <- "EN"
output_text <- "olá"
target_language <- "PT-PT"
# Create class
output <- list('input text' = input_text,
'source language' = source_language,
'output text' = output_text,
'target language' = target_language)
output
output$"source language"
class(output) <- "translation"
output
class(output)
print(output)
library(project.margarida)
translate("Hello friends", "PT-PT")
devtools::document()
?translate
url <- "https://app.plaraphy.com/api/paraphrase?authorization=984|fh0hp1jeCU8kU7q68Sce3n8UizdPxfxWh4I6gFy6"
raw_result <- httr::POST(url, query = list(text = "the reason for it is that i don't like that.",
))
raw_result <- httr::POST(url, query = (text = "the reason for it is that i don't like that.",
))
raw_result <- httr::POST(url, query = list(text = "the reason for it is that i don't like that."
))
raw_result
data <- jsonlite::fromJSON(rawToChar(raw_result$content))
data
url <- "https://app.plaraphy.com/api/paraphrase"
raw_result <- httr::POST(url, query = list(authorization = "984|fh0hp1jeCU8kU7q68Sce3n8UizdPxfxWh4I6gFy6", text = "the reason for it is that i don't like that."))
raw_result
jsonlite::fromJSON(rawToChar(raw_result$content))
raw_result$content
url <- "https://app.plaraphy.com/api/paraphrase?auth_key=984|fh0hp1jeCU8kU7q68Sce3n8UizdPxfxWh4I6gFy6"
raw_result <- httr::POST(url, query =(text = "the reason for it is that i don't like that."))
raw_result <- httr::POST(url, query =list(text = "the reason for it is that i don't like that."))
raw_result
raw_result <- httr::POST(url, text = "the reason for it is that i don't like that.")
raw_result
data <- jsonlite::fromJSON(rawToChar(raw_result$content))
data
raw_result <- httr::POST(url, headers={
'accept': 'application/json',
'content-type': 'application/x-www-form-urlencoded',
'authorization': 'Bearer 984|fh0hp1jeCU8kU7q68Sce3n8UizdPxfxWh4I6gFy6',
'cache-control': 'no-cache',
}
library(project.margarida)
input_text <- "ola"
output_text <- "hello"
isTRUE(all.equal(input_text, output_text))
input_text <- "ola"
output_text <- "ola"
isTRUE(all.equal(input_text, output_text))
library(project.margarida)
translate("Hello world", "EN")
translate("Hello world", "EN-GB")
translate("hello", "EN", "PT-PT")
translate("hello", "PT-PT", "TH")
translate("hello", "EN", "RU")
translate("hello", "TH")
translate("hello", "PT-PT", 3, 2, 1, 0)
translate("hello", "PT-PT", 3, "less", 1, 0)
translate("hello", "PT-PT", "EN", 3, 1, 0)
translate("hello", "PT-PT", "EN", "more", 1, "hello")
translate("hello world", "PT-PT")
translation_1 <- translate("hello world", "PT-PT")
translation_2 <- translate("the brown fox jumped over the black cat", "RU")
translation_2$output_text
translation_1$output_text
translation_3 <- translate("he jumped over the fence", "PT-BR", "EN", "less")
translation_4 <- translate("he jumped over the fence", "PT-BR", "EN", "more")
translation_3 <- translate("he jumped over the fence", "PT-PT", "EN", "less")
translation_4 <- translate("he jumped over the fence", "PT-PT", "EN", "more")
translation_3 <- translate("Sometimes to understand a word's meaning you need
more than a definition. You need to see the word
used in a sentence", "LV", "EN")
translation_3 <- translate("Sometimes to understand a word's meaning you need more than a definition. You need to see the word used in a sentence",
"LV", "EN")
translation_4 <- translate("he jumped over the fence", "PT-PT", "EN", "less")
expect_equal(translation_4$output_text, "ele saltou a vedação")
translation_5 <- translate("he jumped over the fence", "PT-PT", "EN", "more")
translation_6 <- translate("Hello. I saw him leave through there!", "FR", split_sentences = 1)
translation_7 <- translate("Hello. I saw him leave through there!", "FR", split_sentences = 0)
translation_6$output_text
translation_7$output_text
translation_6 <- translate("Hello world. I saw him leave through there!", "FR", split_sentences = 1)
translation_7 <- translate("Hello world. I saw him leave through there!", "FR", split_sentences = 0)
translation_6$output_text
translation_7$output_text
translate("Hello world. I saw him leave through there!", "FR", split_sentences = 0)
translate("hi how are you", "PT-PT")
translate("hi how are you", "PT-PT", preserve_formatting = 1)
translate("hi how are you", "PT-PT", preserve_formatting = 0)
translate("hi how are you", "PT-PT")
translate("hi", "FR")
translate("hi", "FR", preserve_formatting = "0")
translate("hi", "FR", preserve_formatting = 0)
translate("hi", "FR", preserve_formatting = 1)
isTRUE(all.equal(translation_6$output_text, translation_7$output_text))
translation_8 <- translate("hi", "FR", preserve_formatting = 1)
translation_9 <- translate("hi", "FR", preserve_formatting = 0)
isTRUE(all.equal(translation_8$output_text, translation_9$output_text))
translate("Hello world. I saw him leave through there!", "FR", split_sentences = 0)
translate("Hello world. I saw him leave through there!", "FR", split_sentences = 1)
translate("Hello. I saw him leave through there! Go now", "FR", split_sentences = 1)
translate("Hello. I saw him leave through there! Go now", "FR", split_sentences = 0)
translate("Hello. I saw him leave through there! Go now", "FR")
translate("Hello. I saw him leave through there! Go now", "FR", split_sentences = 0)
translate("Hello. I saw him leave through there! Go now", "FR", split_sentences = 1)
isTRUE(all.equal(translation_6$output_text, translation_7$output_text))
translation_6 <- translate("Hello. I saw him leave through there! Go now", "FR", split_sentences = "1")
translation_7 <- translate("Hello. I saw him leave through there! Go now", "FR", split_sentences = "0")
library(project.margarida)
translation_3 <- translate(input_text = "The cat jumped over the fox. then he fell",
target_language = "PT-BR",
source_language = "EN",
formality = "more",
split_sentences = 0,
preserve_formatting = 0)
isTRUE(all.equal(translation_8$output_text, translation_9$output_text))
devtools::test()
translate_1 <- translate("Praktische instructies voor cursisten.", "EN")
translate_1 <- translate("Praktische instructies voor cursisten.", "EN-GB")
isTRUE(all.equal(translate_1$input_text, translate_1$output_text))
translation_7 <- translate("Hello. I saw him leave through there! Go now", "FR", split_sentences = "1")
translation_8 <- translate("Hello. I saw him leave through there! Go now", "FR", split_sentences = "0")
translate("olá", "EN-GB")$output_text
translate("olá a todos", "EN-GB")$source_language
translate_target <- translate("olá a todos", "EN-GB")
translate_target$source_language
translate_3 <- translate("La rata se comió el queso", "EN-GB")
translate_3$source_language
devtools::test()
translation_6 <- translate("The rat ate the cheese. It is all gone",
"LV", "EN")
devtools::test()
devtools::test()
devtools::test()
translation_3 <- translate(input_text = "The cat jumped over the fox. then he fell",
target_language = "PT-BR",
source_language = "EN",
formality = "more",
split_sentences = 0,
preserve_formatting = 1)
translation_3 <- translate(input_text = "The cat jumped over the fox. then he fell",
target_language = "PT-BR",
source_language = "EN",
formality = "more",
split_sentences = 0,
preserve_formatting = 0)
translation_3 <- translate(input_text = "The cat jumped over the fox. then he fell",
target_language = "PT-BR",
source_language = "EN",
formality = "more",
split_sentences = 0,
preserve_formatting = 1)
translation_3 <- translate(input_text = "the cat jumped over the fox. then he fell",
target_language = "PT-BR",
source_language = "EN",
formality = "more",
split_sentences = 0,
preserve_formatting = 1)
translation_2 <- translate(input_text = "the cat jumped over the fox. then he fell",
target_language = "PT-BR",
source_language = "EN",
formality = "less",
split_sentences = 1,
preserve_formatting = 1)
translation_2 <- translate(input_text = "the cat jumped over the fox. then he fell",
target_language = "PT-BR",
source_language = "EN",
formality = "less",
split_sentences = 0,
preserve_formatting = 1)
translation_3 <- translate(input_text = "the cat jumped over the fox. then he fell",
target_language = "PT-BR",
source_language = "EN",
formality = "more",
split_sentences = "0",
preserve_formatting = 0)
library(project.margarida)
translate("hi how are. you", "PT-PT", "EN", split_sentences=0)
translate("hi how are. you", "PT-PT", "EN", split_sentences="0")
translate("hi how are. you", "PT-PT", "EN", "default", 0, 1)
translate("hi how are you", "PT-PT", preserve_formatting = 0)
devtools::test()
translate("Hello. I saw him leave through there.", "FR", split_sentences = "1")
translate("Hello. I saw him leave through there.", "FR", split_sentences = "0")
translate("Hello. I saw him leave through there", "FR", split_sentences = "1")
translate("Hello. I saw him leave through there", "FR", split_sentences = "0")
translation_9 <- translate("Hello.
I saw him leave through there", "FR", split_sentences = "1")
translate("Hello.
I saw him leave through there", "FR", split_sentences = "0")
translate("Hello.
I saw him leave through there", "FR", split_sentences = "nonewlines")
devtools::test()
translate("hello", "LV", formality = "more")
translate("hello", "LV")
translate("hello", "LV", "EN", formality = "more")
library(project.margarida)
translate("hello", "LV", formality = "more")
translate("hello", "RU", formality = "more")
library(project.margarida)
translate("hello", "LV", formality="more")
translate("hello", "RU", formality = "more")
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
ui <- fluidPage(
fluidRow(
column(12,
"Fluid 12",
fluidRow(
column(4,"Fluid 4",
?selectInput
),
column(width = 3, "Fluid 3"),
column(width = 4,"Fluid 4.5")
)
)
)
)
?selectInput
ui <- fluidPage(
fluidRow(
column(12,
"Fluid 12",
fluidRow(
column(4,"Fluid 4",
selectInput("source", label="", choices = c("Detect Language"="NULL", "French"="FR")),
?textInput
),
column(width = 3, "Fluid 3"),
column(width = 4,"Fluid 4.5")
)
)
)
)
?textInput
runApp('R')
runApp('R')
runApp('R')
ui <- fluidPage(
fluidRow(
column(12,
"Fluid 12",
fluidRow(
column(4,
"Fluid 4",
wellPanel(
selectInput("source", label="", choices = c("Detect Language"="NULL", "French"="FR")),
textInput("input_text", label="", value ="")
)
),
column(width = 3,
"Fluid 3",
wellPanel(
?radioButtons()
)
),
column(width = 4,
"Fluid 4.5",
wellPanel(
selectInput("target", label="", choices = c("Portuguese"="PT-PT", "French"="FR")),
textOutput("output_text", container = div)
)
)
)
)
)
)
?radioButtons()
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
