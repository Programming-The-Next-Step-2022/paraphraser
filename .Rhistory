setwd("~/Documents/GitHub/project_margarida")
setwd("~/Documents/GitHub/project_margarida/paraphraser")
package.skeleton(name="translator")
package.skeleton(name=translator, code_files="main.R")
package.skeleton(name="translator", code_files="main.R")
devtools::load_all("~/Documents/GitHub/project_margarida")
use_description()
devtools::install_deps()
??use_description()
usethis::use_description()
usethis::use_description(check_name=FALSE)
setwd("~/Documents/GitHub/project_margarida")
create_package()
??create_package()
usethis::use_vignette("my-vignette")
shiny::runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
library(project.margarida)
translate("hello", "FR", preserve_formatting = "1")
translate("hello", "FR", preserve_formatting = "0")
translate("hello", "FR", preserve_formatting = "4")
translate("hello", "FR", preserve_formatting = TRUE)
preserve_formatting = "1"
if(preserve_formatting == "0") {
preserve_formatting <- 0
} else if(preserve_formatting == "1") {
preserve_formatting <- 1
}
preserve_formatting
typeof(preserve_formatting)
preserve_formatting = "1"
typeof(preserve_formatting)
preserve_formatting <- as.numeric(preserve_formatting)
preserve_formatting
typeof(preserve_formatting)
as.numeric(preserve_formatting)
preserve_formatting <- as.numeric(preserve_formatting)
preserve_formatting
typeof(preserve_formatting)
runApp('R')
runApp('R')
library(project.margarida)
translate("hi friends", "PT-PT", "EN", formality="more", preserve_formatting="0")
library(project.margarida)
translate("hello friends", "PT-PT", "EN", formality="more", preserve_formatting = "0")
library(project.margarida)
translate("hello friends", "PT-PT", "EN", formality="more", preserve_formatting = "0")
library(project.margarida)
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
devtools::document()
library(project.margarida)
devtools::document()
devtools::document("project.margarida")
runApp('R')
devtools::document()
rm(list = c("translate"))
devtools::document()
shiny::runApp('R')
?wellPanel
?textOutput
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
shiny::runApp('R')
library(project.margarida)
translate("he jumped over the fence", "PT-BR", formality="more")
translate("he jumped over the fence", "PT-BR", formality="less")
devtools::document()
rm(list = c("translate"))
devtools::document()
devtools::document(rm(list = c("translate")))
devtools::test()
source("/main.R")
runApp('R')
paste("Detected language is:","French")
runApp('R')
runApp('R')
languages <- c("Bulgarian","Czech",
"Danish", "German",
"Greek", "English",
"Spanish", "Estonian",
"Finnish", "French",
"Hungarian", "Indonesian",
"Italian", "Japanese" ,
"Lithuanian" , "Latvian" ,
"Dutch", "Polish",
"Portuguese", "Romanian",
"Russian", "Slovak",
"Slovenian", "Swedish",
"Turkish", "Chinese")
codes <- c("BG", "CS", "DA", "DE","EL","EN","ES","ET","FI","FR","HU","ID","IT",
"JA", "LT", "LV","NL","PL", "PT", "RO", "RU", "SK", "SL", "SV",
"TR", "ZH")
data.frame(languages, codes, ncol=2, nrow=26)
data.frame(languages, codes)
m <- data.frame(languages, codes)
# Define UI ------------------------------------------------------------------
ui <- fluidPage(
theme= shinytheme("sandstone"),
tags$head(tags$style(HTML('* {font-family: "Beirut"};'))),
titlePanel("Translator"),
p("This translator was built with an R package that uses the API from Deepl.
(https://www.deepl.com). You can choose from 28 different languages to
translate your text to. Input your text in the left box and select which
language you want to translate it to in the drop down button on the right."),
languages <- c("Bulgarian","Czech",
"Danish", "German",
"Greek", "English",
"Spanish", "Estonian",
"Finnish", "French",
"Hungarian", "Indonesian",
"Italian", "Japanese" ,
"Lithuanian" , "Latvian" ,
"Dutch", "Polish",
"Portuguese", "Romanian",
"Russian", "Slovak",
"Slovenian", "Swedish",
"Turkish", "Chinese"),
codes <- c("BG", "CS", "DA", "DE","EL","EN","ES","ET","FI","FR","HU","ID","IT",
"JA", "LT", "LV","NL","PL", "PT", "RO", "RU", "SK", "SL", "SV",
"TR", "ZH"),
m <- data.frame(languages, codes),
m[codes==SV]
m[codes==SV]
m <- data.frame(languages, codes)
m[,"SV"]
langs <- c("BG"="Bulgarian", "CS"="Czech")
# Define UI ------------------------------------------------------------------
ui <- fluidPage(
theme= shinytheme("sandstone"),
tags$head(tags$style(HTML('* {font-family: "Beirut"};'))),
titlePanel("Translator"),
p("This translator was built with an R package that uses the API from Deepl.
(https://www.deepl.com). You can choose from 28 different languages to
translate your text to. Input your text in the left box and select which
language you want to translate it to in the drop down button on the right."),
languages <- c("Bulgarian","Czech",
"Danish", "German",
"Greek", "English",
"Spanish", "Estonian",
"Finnish", "French",
"Hungarian", "Indonesian",
"Italian", "Japanese" ,
"Lithuanian" , "Latvian" ,
"Dutch", "Polish",
"Portuguese", "Romanian",
"Russian", "Slovak",
"Slovenian", "Swedish",
"Turkish", "Chinese"),
codes <- c("BG", "CS", "DA", "DE","EL","EN","ES","ET","FI","FR","HU","ID","IT",
"JA", "LT", "LV","NL","PL", "PT", "RO", "RU", "SK", "SL", "SV",
"TR", "ZH"),
m <- data.frame(languages, codes),
langs <- c("BG"="Bulgarian", "CS"="Czech")
langs["BG"]
langs <- c("BG"="Bulgarian", "CS"="Czech")
langs["BG"]
langs <- c("BG" = "Bulgarian", "CS" = "Czech","DA" = "Danish", "DE" = "German",
"EL" = "Greek", "EN" = "English", "ES" = "Spanish", "ET" = "Estonian",
"FI" = "Finnish", "FR" = "French", "HU" = "Hungarian",
"ID" = "Indonesian", "IT" = "Italian", "JA" = "Japanese",
"LT" = "Lithuanian", "LV" = "Latvian", "NL" = "Dutch", "PL" = "Polish",
"PT" = "Portuguese", "RO" = "Romanian", "RU" = "Russian",
"SK" = "Slovak", "SL" = "Slovenian", "SV" = "Swedish", "TR" = "Turkish",
"ZH" = "Chinese")
langs["SK"]
m <- "PT"
langs[m]
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
translation_7 <- translate("he jumped over the fence", "PT-PT", "EN", "less")
translation_8 <- translate("he jumped over the fence", "PT-PT", "EN", "more")
isTRUE(all.equal(translation_7$output_text,
translation_8$output_text))
translation_11 <- translate("hi", "FR", preserve_formatting = 1)
translation_12 <- translate("hi", "FR", preserve_formatting = 0)
isTRUE(all.equal(translation_11$output_text,
translation_12$output_text))
runApp('R')
runApp('R')
runApp('R')
runApp('R')
preserve_formatting == "1"
# Change preserve_formatting argument back to numeric if it is not
# Had to change it to strings so that shiny would work
if(preserve_formatting == "0") {
preserve_formatting <- 0
} else if(preserve_formatting == "1") {
preserve_formatting <- 1
}
preserve_formatting <- "1"
# Change preserve_formatting argument back to numeric if it is not
# Had to change it to strings so that shiny would work
if(preserve_formatting == "0") {
preserve_formatting <- 0
} else if(preserve_formatting == "1") {
preserve_formatting <- 1
}
preserve_formatting
preserve_formatting <- "1"
if(!is.numeric(preserve_formatting) && !is.character(preserve_formatting) ) {
print("Argument 'preserve_formatting' must be valid number or string.")
}
preserve_formatting <- 0
if(!is.numeric(preserve_formatting) && !is.character(preserve_formatting) ) {
print("Argument 'preserve_formatting' must be valid number or string.")
}
preserve_formatting <- FALSE
if(!is.numeric(preserve_formatting) && !is.character(preserve_formatting) ) {
print("Argument 'preserve_formatting' must be valid number or string.")
}
preserve_formatting <- TRUE
if(!is.numeric(preserve_formatting) && !is.character(preserve_formatting) ) {
print("Argument 'preserve_formatting' must be valid number or string.")
}
library(project.margarida)
translate("hello friends", "RU", preserve_formatting = 2)
translate("hello friends", "RU", preserve_formatting = TRUE)
translate("hello friends", "RU", preserve_formatting = 0)
devtools::test()
runApp('R')
runApp('R')
library(project.margarida)
devtools::test()
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
library("shiny")
### TO DO ### ---------------------------------------------------------------
# DONE - make formatting button work
# DONE - make sure formatting button only appears if available target language is selected
# DONEish (always showing) - show detected source language somewhere - maybe update source button?
# DONE - make sure detect language in source language works
# Define UI ------------------------------------------------------------------
shiny_translate <- function() {
ui <- fluidPage(
theme = shinythemes::shinytheme("sandstone"),
tags$head(tags$style(HTML('* {font-family: "Beirut"};'))),
titlePanel("Translator"),
p("This translator was built with an R package that uses the API from Deepl.
(https://www.deepl.com). You can choose from 28 different languages to
translate your text to. Input your text in the left box and select which
language you want to translate it to in the drop down button on the right."),
fluidRow(
# Left Section:
column(4,
wellPanel(
selectInput("source",
label="",
choices = c("Detect Language" = "NULL",
"Bulgarian" = "BG", "Czech" = "CS",
"Danish" = "DA", "German" = "DE",
"Greek" = "EL", "English" = "EN",
"Spanish" = "ES", "Estonian" = "ET",
"Finnish" = "FI", "French" = "FR",
"Hungarian" = "HU", "Indonesian" = "ID",
"Italian" = "IT", "Japanese" = "JA",
"Lithuanian" = "LT", "Latvian" = "LV",
"Dutch" = "NL", "Polish" = "PL",
"Portuguese" = "PT", "Romanian" = "RO",
"Russian" = "RU", "Slovak" = "SK",
"Slovenian" = "SL", "Swedish" = "SV",
"Turkish" = "TR", "Chinese" = "ZH"),
selected = "NULL"),
textOutput("detected_source"),
textAreaInput("input_text", label="", value ="", height = "500px")
)
),
# Middle section:
column(width = 3,
wellPanel(
# changed to strings and now works but commented out warning messages
radioButtons("formatting",
label= "Choose whether you want to keep original formatting:",
choices = c("Yes" = "1", "No" = "0"),
selected = "1"),
# conditions to make formality button appear or not
conditionalPanel(
condition = "input.target == 'PT-PT'",
radioButtons("formality",
label ="Choose the level of formality:",
choices = c("Default"="default",
"Formal"="more",
"Informal"="less"),
selected = "default"),
),
conditionalPanel(
condition = "input.target == 'RU'",
radioButtons("formality",
label ="Choose the level of formality:",
choices = c("Default"="default",
"Formal"="more",
"Informal"="less"),
selected = "default")
),
conditionalPanel(
condition = "input.target == 'PT-BR'",
radioButtons("formality",
label ="Choose the level of formality:",
choices = c("Default"="default",
"Formal"="more",
"Informal"="less"),
selected = "default")
),
conditionalPanel(
condition = "input.target == 'DE'",
radioButtons("formality",
label ="Choose the level of formality:",
choices = c("Default"="default",
"Formal"="more",
"Informal"="less"),
selected = "default")
),
conditionalPanel(
condition = "input.target == 'FR'",
radioButtons("formality",
label ="Choose the level of formality:",
choices = c("Default"="default",
"Formal"="more",
"Informal"="less"),
selected = "default")
),
conditionalPanel(
condition = "input.target == 'IT'",
radioButtons("formality",
label ="Choose the level of formality:",
choices = c("Default"="default",
"Formal"="more",
"Informal"="less"),
selected = "default")
),
conditionalPanel(
condition = "input.target == 'ES'",
radioButtons("formality",
label ="Choose the level of formality:",
choices = c("Default"="default",
"Formal"="more",
"Informal"="less"),
selected = "default")
),
conditionalPanel(
condition = "input.target == 'NL'",
radioButtons("formality",
label ="Choose the level of formality:",
choices = c("Default"="default",
"Formal"="more",
"Informal"="less"),
selected = "default")
),
conditionalPanel(
condition = "input.target == 'PL'",
radioButtons("formality",
label ="Choose the level of formality:",
choices = c("Default"="default",
"Formal"="more",
"Informal"="less"),
selected = "default")
)
)
),
# Right Section:
column(width = 4,
#wellPanel(
# Select target language
selectInput("target",
label="",
choices = c("Bulgarian" = "BG", "Czech" = "CS",
"Danish" = "DA", "German" = "DE",
"Greek" = "EL", "British English" = "EN-GB",
"American English" = "EN-US",
"Spanish" = "ES", "Estonian" = "ET",
"Finnish" = "FI", "French" = "FR",
"Hungarian" = "HU", "Indonesian" = "ID",
"Italian" = "IT", "Japanese" = "JA",
"Lithuanian" = "LT", "Latvian" = "LV",
"Dutch" = "NL", "Polish" = "PL",
"Portuguese" = "PT-PT",
"Brazilian Portuguese" = "PT-BR",
"Romanian" = "RO", "Russian" = "RU",
"Slovak" = "SK", "Slovenian" = "SL",
"Swedish" = "SV", "Turkish" = "TR",
"Chinese" = "ZH")),
# Output translated text
# creates beige box for it but is small
wellPanel(
textOutput("text_output")
)
)
)
) # close ui
# Define server -------------------------------------------------------------
server <- function(input, output) {
# Output translated text
output$text_output <- renderText({
translation <- translate(input_text = input$input_text,
target_language = input$target,
source_language = input$source,
formality = input$formality,
preserve_formatting = input$formatting)
translation$output_text
})
# Output detected language
output$detected_source <- renderText({
# create code to language mapping
code_to_lang <- c("BG" = "Bulgarian", "CS" = "Czech","DA" = "Danish",
"DE" = "German","EL" = "Greek", "EN" = "English",
"ES" = "Spanish", "ET" = "Estonian", "FI" = "Finnish",
"FR" = "French", "HU" = "Hungarian", "ID" = "Indonesian",
"IT" = "Italian", "JA" = "Japanese", "LT" = "Lithuanian",
"LV" = "Latvian", "NL" = "Dutch", "PL" = "Polish",
"PT" = "Portuguese", "RO" = "Romanian", "RU" = "Russian",
"SK" = "Slovak", "SL" = "Slovenian", "SV" = "Swedish",
"TR" = "Turkish", "ZH" = "Chinese")
# have to re run translation or else can't access it
translation <- translate(input_text = input$input_text,
target_language = input$target,
source_language = input$source,
formality = input$formality,
preserve_formatting = input$formatting)
source_code <- translation$source_language
source_lang <- code_to_lang[source_code]
paste("Detected language is: ", source_lang)
})
}
# Create shiny app -----------------------------------------------------------
shinyApp(ui = ui, server = server)
}
shiny_translate()
devtools::document()
load_all()
devtools::load_all()
devtools::document()
